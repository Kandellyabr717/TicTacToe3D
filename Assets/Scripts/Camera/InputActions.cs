//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Camera/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""8d9e3bf8-c66c-479d-806d-3a63fcaf409b"",
            ""actions"": [
                {
                    ""name"": ""Holded"",
                    ""type"": ""Button"",
                    ""id"": ""06213ff2-72ea-402c-aeac-b1975fe46977"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""83017b89-9a12-4df3-a5d5-108e664b2fd5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scale"",
                    ""type"": ""Value"",
                    ""id"": ""6305fb3c-6df9-4c0a-935d-e8bc57bcb56a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FirstPosition"",
                    ""type"": ""Value"",
                    ""id"": ""5b499f68-d569-4bf2-8237-08ba304cdce0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondPosition"",
                    ""type"": ""Value"",
                    ""id"": ""d796fc57-fef6-40b3-bcf2-f5d279d368ab"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondTouch"",
                    ""type"": ""Button"",
                    ""id"": ""2a6b7a3d-c4be-4935-8a9f-fccbee518a77"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9c09bedb-d86f-46b2-89f6-65af6ed53339"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Holded"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18c17533-9174-42a7-8fcf-90f1475a0218"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Holded"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0dce7fd-9191-4500-9fe9-bc687d6fdab0"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Scale"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3673f97-bc25-4073-aa6c-98ac179b2348"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""824441d4-a35e-4081-8d1f-fbff20e11b0c"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe27c7d8-5ce0-47cf-ae12-5e8e0fa61298"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""FirstPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""373f4f3d-e33e-4dfb-b7ff-ca2c3ac5f180"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5708e565-123d-4f93-bbcc-c80e67cb24c7"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""SecondPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": []
        },
        {
            ""name"": ""Touchscreen"",
            ""bindingGroup"": ""Touchscreen"",
            ""devices"": []
        }
    ]
}");
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Holded = m_Camera.FindAction("Holded", throwIfNotFound: true);
        m_Camera_Rotation = m_Camera.FindAction("Rotation", throwIfNotFound: true);
        m_Camera_Scale = m_Camera.FindAction("Scale", throwIfNotFound: true);
        m_Camera_FirstPosition = m_Camera.FindAction("FirstPosition", throwIfNotFound: true);
        m_Camera_SecondPosition = m_Camera.FindAction("SecondPosition", throwIfNotFound: true);
        m_Camera_SecondTouch = m_Camera.FindAction("SecondTouch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_Holded;
    private readonly InputAction m_Camera_Rotation;
    private readonly InputAction m_Camera_Scale;
    private readonly InputAction m_Camera_FirstPosition;
    private readonly InputAction m_Camera_SecondPosition;
    private readonly InputAction m_Camera_SecondTouch;
    public struct CameraActions
    {
        private @InputActions m_Wrapper;
        public CameraActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Holded => m_Wrapper.m_Camera_Holded;
        public InputAction @Rotation => m_Wrapper.m_Camera_Rotation;
        public InputAction @Scale => m_Wrapper.m_Camera_Scale;
        public InputAction @FirstPosition => m_Wrapper.m_Camera_FirstPosition;
        public InputAction @SecondPosition => m_Wrapper.m_Camera_SecondPosition;
        public InputAction @SecondTouch => m_Wrapper.m_Camera_SecondTouch;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @Holded.started += instance.OnHolded;
            @Holded.performed += instance.OnHolded;
            @Holded.canceled += instance.OnHolded;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @Scale.started += instance.OnScale;
            @Scale.performed += instance.OnScale;
            @Scale.canceled += instance.OnScale;
            @FirstPosition.started += instance.OnFirstPosition;
            @FirstPosition.performed += instance.OnFirstPosition;
            @FirstPosition.canceled += instance.OnFirstPosition;
            @SecondPosition.started += instance.OnSecondPosition;
            @SecondPosition.performed += instance.OnSecondPosition;
            @SecondPosition.canceled += instance.OnSecondPosition;
            @SecondTouch.started += instance.OnSecondTouch;
            @SecondTouch.performed += instance.OnSecondTouch;
            @SecondTouch.canceled += instance.OnSecondTouch;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @Holded.started -= instance.OnHolded;
            @Holded.performed -= instance.OnHolded;
            @Holded.canceled -= instance.OnHolded;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @Scale.started -= instance.OnScale;
            @Scale.performed -= instance.OnScale;
            @Scale.canceled -= instance.OnScale;
            @FirstPosition.started -= instance.OnFirstPosition;
            @FirstPosition.performed -= instance.OnFirstPosition;
            @FirstPosition.canceled -= instance.OnFirstPosition;
            @SecondPosition.started -= instance.OnSecondPosition;
            @SecondPosition.performed -= instance.OnSecondPosition;
            @SecondPosition.canceled -= instance.OnSecondPosition;
            @SecondTouch.started -= instance.OnSecondTouch;
            @SecondTouch.performed -= instance.OnSecondTouch;
            @SecondTouch.canceled -= instance.OnSecondTouch;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);
    private int m_MouseSchemeIndex = -1;
    public InputControlScheme MouseScheme
    {
        get
        {
            if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
            return asset.controlSchemes[m_MouseSchemeIndex];
        }
    }
    private int m_TouchscreenSchemeIndex = -1;
    public InputControlScheme TouchscreenScheme
    {
        get
        {
            if (m_TouchscreenSchemeIndex == -1) m_TouchscreenSchemeIndex = asset.FindControlSchemeIndex("Touchscreen");
            return asset.controlSchemes[m_TouchscreenSchemeIndex];
        }
    }
    public interface ICameraActions
    {
        void OnHolded(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnScale(InputAction.CallbackContext context);
        void OnFirstPosition(InputAction.CallbackContext context);
        void OnSecondPosition(InputAction.CallbackContext context);
        void OnSecondTouch(InputAction.CallbackContext context);
    }
}
